{"/getting-started/set-up-your-machine":{"title":"Set up your machine","data":{"":"Install the Google Cloud CLI\nInstall Terraform","1-install-the-google-cloud-cli#1. Install the Google Cloud CLI":"While you might find that using the Google Cloud web console or online Cloud Shell environment meets your occasional needs, for professional work you generally want to install the Google Cloud CLI (gcloud) on your own system where presumably you already have the bash shell, git, and your favorite editor or IDE already set up.After installing gcloud, you need to install the beta component as well (it will be used later to link billing to projects):\ngcloud components install beta\nDon't worry about installing any other components. For now, you'll only need the CLI so you can login and create projects using the terminal. You'll install Terraform (in the next step) for managing resources using YAML configuration instead of entering explicit gcloud commands.","2-install-terraform#2. Install Terraform":"Follow these instructions."}},"/overview/why-gcp":{"title":"Why GCP?","data":{"":"","leading-global-network-infrastructure#Leading global network infrastructure":"28 regions, 85 zones, 146 edge locations, 200+ countries","fastest-data-throughput-of-any-cloud#Fastest data throughput of any cloud":"https://www.thestack.technology/aws-vs-azure-vs-gcp/","performance-optimization-through-network-service-tiers#Performance optimization through Network Service Tiers":"https://kinsta.com/blog/google-cloud-network/\nStandard Tier that offers performance that is competitive with other cloud\nproviders, optimizing for cost with with a regional approach to load\nbalancing.\nPremium Tier routes traffic through Google's private fiber network with over\none hundred points of presence (POPs), with global load balancing using a\nsingle anycast IP address that is unique to Google."}},"/getting-started/set-up-your-project":{"title":"Set up your project","data":{"":"A Google Cloud project refers to the collection of related applications, physical cloud infrastructure, and other resources (such as secrets, container images, static assets, etc.) that you deploy on Google Cloud.\nRemember: You can deploy more than one application to the same Google Cloud project. This is particularly applicable to microservice projects.\nEvery time you want to create a new project, you'll follow the same steps:\nLog in at the terminal\nCreate a project\nLink the project to billing","1-log-in-at-the-terminal#1. Log in at the terminal":"You might have several accounts, or your login has expired, or this is your first login. In any case, you can log in to your Google Cloud account from the terminal with the following command:\ngcloud auth login\nThis will open a page using your system web browser. Confirm that the page is a link under https://accounts.google.com/ and authorize the Google Cloud SDK to be able to access your Google account.After that, you can close the page. Back in your shell, you should see confirmation that you've logged in like this:Don't worry about setting a project now. You'll create a project in the next step and then use Terraform configuration to specify the project to use.","2-create-a-google-cloud-project#2. Create a Google Cloud project":"If you already have a specific Google Cloud project to use, you can skip this section.\nOnce you're logged in, you can create or specify an existing Google Cloud project to use and configure locally.\ngcloud projects create my-amazing-demo-1\n\nNote: If you're creating a project as part of an organization, you'll need to know the Folder ID that your project should be under. Discussing organization accounts is beyond this scope, but you can learn more here. The command to create the project has an option for providing the Folder ID: gcloud projects create [PROJECT_ID] --folder [FOLDER_ID].","3-link-the-project-to-billing#3. Link the project to billing":"If billing has already been linked to an existing project, you can skip this section.\nOnce you've created the project, you must link it to a billing account.You can find your billing account ID on your billing accounts page.\ngcloud beta billing projects link my-amazing-demo-1 --billing-account 0X0X0X-0X0X0X-0X0X0X\n\nIn the screenshot above, I have my billing account ID saved in a shell variable."}},"/terraform/overview":{"title":"Overview","data":{"":"There are a few Terraform files you'll need to configure for each GCP project:\nversions.tf\nvariables.tf\n\nThese files use a simple configuration syntax called HashiCorp Configuration\nLanguage (HCL).You'll be introduced to these files over the next few pages, then dive into more\ndetail once it time to start deploying things."}},"/terraform/variables-tf":{"title":"variables.tf","data":{"":"You'll need a variables.tf file to declare the required input variables for your Terraform script.\nvariable \"project_id\" {\ntype        = string\ndescription = \"The Google Cloud project ID.\"\n}\n\nvariable \"region\" {\ntype        = string\ndefault     = \"us-central1\"\ndescription = \"The Google Cloud region to use.\"\n}\n\nvariable \"deployment_name\" {\ntype        = string\ndescription = \"Identifier for this deployment (used in some resource names).\"\ndefault     = \"demo\"\n}\n\nvariable \"app_image\" {\ntype        = string\ndescription = \"Initial image to deploy to Cloud Run service.\"\ndefault     = \"LOCATION-docker.pkg.dev/PROJECT-ID/REPOSITORY/IMAGE\"\n}\n\nvariable \"labels\" {\ntype        = map(string)\ndescription = \"A set of key/value label to tag resources deployed by this solution.\"\ndefault     = {}\n}"}},"/about":{"title":"About TypeScript on GCP","data":{"":"I've been fortunate to work my entire career as a programmer in Silicon Valley\nfor various icons of the tech industry, including Yahoo, AWS, Appcelerator, and\nthese past four years, for Google.I'm currently the JavaScript advocacy lead at Google Cloud, and my goal is to\nhelp other full stack developers succeed in building and running their apps on\nGoogle Cloud Platform (GCP).TypeScript on GCP is an online guide for full stack development on Google\nCloud Platform.The source for this guide is at:\nhttps://github.com/subfuzion/typescript-on-gcp.This guide and its source are covered by the\nApache 2.0 license.Copyright Â© 2023 Tony Pujals. All rights reserved."}},"/terraform/versions-tf":{"title":"versions.tf","data":{"":"You'll need a versions.tf file that adds the Google Cloud provider.At the time of writing this, the current version of Terraform is v1.5.2 and the current Google Cloud provider is v4.72.1.\nterraform {\nrequired_version = \">= 0.13\"\nrequired_providers {\ngoogle = {\nsource  = \"hashicorp/google\"\nversion = \">= 4.72.1, < 5.0\"\n}\n}"}},"/getting-started/set-up-your-account":{"title":"Set up your account","data":{"":"To use Google Cloud, you'll need a Google account and billing account.\nSet up a Google account\nSet up a billing account","1-set-up-a-google-account#1. Set up a Google account":"Visit https://cloud.google.com/.If you don't already have a Google Account, then sign up by clicking Get started for free.\nOrganizations are outside of this scope of this guide. See here if you want to set up an organization.\nWith an account, you get access to both\na Free Trial\na Free Tier\n\nThe Free Trial provides $300 of Cloud Billing credits to pay for resources for 90 days while you learn about Google Cloud.The Free Tier provides access to Google Cloud products for free beyond the Free Trial as long as you stay below the Free Tier limits.","2-enable-billing#2. Enable billing":"If you use the Free Trial, Google creates a billing account for you and credits $300 to your account.Once the free trial period ends, you'll be able to continue to use the Free Tier, but you must set up a billing account to cover any costs that exceed free tier limits."}},"/getting-started/overview":{"title":"Overview","data":{"":"There are a few things you need to take care of:\nSet up a GCP account if you don't already have one.\nSet up your machine.\nSet up a Google Cloud project.\n\nThe last step is something you need to do every time you create a new GCP\nproject. A GCP project is a collection of related applications and resources, so\nyou don't necessarily need to create a new project every time you want to deploy\nanother application unless they are unrelated to each other."}},"/overview/why-terraform":{"title":"Why Terraform?","data":{"":"With Terraform, you can use YAML to configure:\nCloud infrastructure resources (including compute and storage services).\nCloud resources (such as Cloud Build and Cloud Deploy) for automating CI/CD pipelines.\n\nThis is known as Infrastructure as Code, and advantages include:\nUsing a declarative approach to define an outcome that the Terraform engine\nwill strive to achieve\nTracking changes to configuration using version control\n\nFull stack developers are generally already familiar with using a variety of\nconfiguration files for managing various settings for their applications. A\ntypical sampling of these files might include:\npackage.json\ntsconfig.json\nnext.config.ts\n.eslintrc\n.editorconfig\nlaunch.json\n\nTerraform adds a few more files to the developer's configuration repertoire, but\ndon't let this discourage you. This guide will walk you through the basics of\nwhat you need to know to get up and running quickly. Once you become familiar\nwith Terraform, you'll appreciate the effort saved from trying to wrangle\ninfrastructure manually."}},"/":{"title":"Introduction","data":{"":"GCP offers over one hundred services along with a dizzying array of online\nresources. So many, indeed, that this is somewhat both a blessing and a curse.\nFor someone new to the cloud (or even just new to GCP), figuring out how and\nwhere to start can certainly feel daunting.I decided to put this guide together to share a clear, practical, and\nopinionated picture tailored specifically for full stack developers. To keep it\nsuccinct, I focus mainly on the following:\nFor programming, the language is TypeScript\nFor standalone API examples, the framework is Express.js\nFor full stack examples, the framework is Next.js\nFor configuring infrastructure as code, the framework is Terraform","what-youll-learn#What you'll learn":"In this guide, you'll learn how to:\nBuild modern, full stack, scalable apps that run on GCP\nLeverage global load balancing and edge caching for enhancing performance\nIntegrate your apps with other necessary or feature-enhancing services\nConfigure and manage the GCP resources your app requires using YAML\nCustomize your app's runtime process environment using a Dockerfile","what-you-should-already-know#What you should already know":"To follow this guide, you don't need to be an expert, but you should at least\nhave basic proficiency with the following:\nUsing the command line in a terminal\nProgramming in TypeScript","sharing-feedback#Sharing feedback":"If you have any issues or want to suggest improvements, please\nshare your feedback.Good luck on your journey!Tony Pujals\nMountain View, California\nJuly, 2023"}}}